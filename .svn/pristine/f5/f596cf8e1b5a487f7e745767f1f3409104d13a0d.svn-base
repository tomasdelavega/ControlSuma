package es.gobcantabria.aplicaciones.controlSuma.business.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.atlassian.jira.rpc.soap.client.RemoteProject;
import com.atlassian.jira.rpc.soap.client.RemoteProjectRole;
import com.atlassian.jira.rpc.soap.client.RemoteRoleActors;

import es.gobcantabria.aplicaciones.controlSuma.business.dao.InventarioDAO;
import es.gobcantabria.aplicaciones.controlSuma.business.dao.RolDAO;
import es.gobcantabria.aplicaciones.controlSuma.business.domain.Inventario;
import es.gobcantabria.aplicaciones.controlSuma.business.domain.Rol;
import es.gobcantabria.aplicaciones.controlSuma.business.dto.InventarioWithJiraDTO;
import es.gobcantabria.aplicaciones.controlSuma.business.dto.RespuestaSincronizadoJiraDTO;
import es.gobcantabria.aplicaciones.controlSuma.business.dto.RolesWithJiraDTO;
import es.gobcantabria.aplicaciones.controlSuma.business.helper.AdministracionHelper;
import es.gobcantabria.aplicaciones.controlSuma.business.service.AdministracionService;
import es.gobcantabria.aplicaciones.controlSuma.util.Utilidades;
import es.gobcantabria.aplicaciones.jirawsuma.JiraWSumaInterface;
import es.gobcantabria.aplicaciones.jirawsuma.impl.JiraWSumaImpl;
/**
 * Clase que implementa los métodos del Servicio de Administración 
 * @author malba
 *
 */
@Service
@Transactional
public class AdminitracionServiceImpl implements AdministracionService {

	@Autowired
	private InventarioDAO inventarioDAO;
	
	@Autowired
	private RolDAO rolDAO;	
	
	@Autowired
	private AdministracionHelper administracionHelper;
	
	
	@Override
	public RespuestaSincronizadoJiraDTO ComprobarSincronizacionWithJira() {

		Map <String,Inventario> mapInventario= new HashMap<String,Inventario>();
		RespuestaSincronizadoJiraDTO respuesta= new RespuestaSincronizadoJiraDTO();
		List<InventarioWithJiraDTO> listaRespuesta= new ArrayList<InventarioWithJiraDTO>();
		JiraWSumaInterface wsJira= new JiraWSumaImpl(Utilidades.getinstanceJiraconfiguration());
		
		List<Inventario> listaInventario = inventarioDAO.executeQuery("Inventario.findAllActivos");
		List<RemoteProject>  proyectosJira= wsJira.findAllProject();
		
		
		
		for (Inventario inventario: listaInventario){
			if (!mapInventario.containsKey(inventario.getCodJira())){
				mapInventario.put(inventario.getCodJira(), inventario);
			}
		}
		respuesta.setnProyectosActivosInventario(listaInventario.size());
		respuesta.setnProyectosSincronizadosJiraInicial(mapInventario.size());
		
		
		int cont=0;
		for (RemoteProject pJira:proyectosJira ){
			
			if (!mapInventario.containsKey(pJira.getKey())){
				//No existe, se debe crear el proyecto
				//Inventario inv= crearInventario(pJira);
				//mapInventario.put(inv.getCodJira(), inv);
				cont++;
				listaRespuesta.add(administracionHelper.cargarInventarioWithJiraDTO(pJira,"No"));
			}else{
				listaRespuesta.add(administracionHelper.cargarInventarioWithJiraDTO(mapInventario.get(pJira.getKey()),"Sí"));
			}
			
		}
		respuesta.setnProyectosPendienteSincronizados(cont);
		respuesta.setListaProyectos(listaRespuesta);
		
		return respuesta;
		
	}
	
	private Inventario crearInventario(RemoteProject pJira){
		Inventario inv= new Inventario();
		System.out.println(pJira.getKey());
		inv.setActivo(1);
		inv.setCodJira(pJira.getKey());
		inv.setCodInventario(pJira.getKey());
		inv.setNombreInventario(pJira.getName());
		inv.setDescripcion(pJira.getDescription());
		
		StringBuilder obs = new StringBuilder();
		obs.append("- Otra información obtenida de JIRA");
		obs.append(" \n "); 
		obs.append("  -> Lider del Proyecto: "+pJira.getLead());
		obs.append(" \n ");
		obs.append("  -> URL del Proyecto "+pJira.getUrl());
		
		inv.setObservaciones(obs.toString());
		
				
		inventarioDAO.create(inv);
		
		return inv;
		
		
	}
	
	@Override
	public RespuestaSincronizadoJiraDTO ComprobarCrearEnInventario() {
		Map <String,Inventario> mapInventario= new HashMap<String,Inventario>();
		RespuestaSincronizadoJiraDTO respuesta= new RespuestaSincronizadoJiraDTO();
		List<InventarioWithJiraDTO> listaRespuesta= new ArrayList<InventarioWithJiraDTO>();
		JiraWSumaInterface wsJira= new JiraWSumaImpl(Utilidades.getinstanceJiraconfiguration());
		
		List<Inventario> listaInventario = inventarioDAO.executeQuery("Inventario.findAllActivos");
		List<RemoteProject>  proyectosJira= wsJira.findAllProject();
		
		
		
		for (Inventario inventario: listaInventario){
			if (!mapInventario.containsKey(inventario.getCodJira())){
				mapInventario.put(inventario.getCodJira(), inventario);
			}
		}
		
		int cont=0;
		for (RemoteProject pJira:proyectosJira ){
			
			if (!mapInventario.containsKey(pJira.getKey())){
				//No existe, se debe crear el proyecto
				Inventario inv= crearInventario(pJira);
				mapInventario.put(inv.getCodJira(), inv);
				cont++;
			}
				listaRespuesta.add(administracionHelper.cargarInventarioWithJiraDTO(mapInventario.get(pJira.getKey()),"Sí"));
			
			
		}
		respuesta.setnProyectosPendienteSincronizados(0);
		respuesta.setnProyectosActivosInventario(mapInventario.size());
		respuesta.setnProyectosSincronizadosJiraInicial(mapInventario.size());
		respuesta.setListaProyectos(listaRespuesta);
		
		return respuesta;
		
	}
	
	@Override
	public RespuestaSincronizadoJiraDTO ComprobarSincronizacionWithJiraRoles() {

		Map <String,Rol> mapRoles= new HashMap<String,Rol>();
		RespuestaSincronizadoJiraDTO respuesta= new RespuestaSincronizadoJiraDTO();
		List<RolesWithJiraDTO> listaRespuesta= new ArrayList<RolesWithJiraDTO>();
		
		JiraWSumaInterface wsJira= new JiraWSumaImpl(Utilidades.getinstanceJiraconfiguration());
		
		List<Rol> listaRoles = rolDAO.executeQuery("Rol.findAll");
		List<RemoteProjectRole>  rolesJira= wsJira.findAllRoles();
		
		
		
		for (Rol rol: listaRoles){
			if (!mapRoles.containsKey(rol.getNombre())){
				mapRoles.put(rol.getNombre(), rol);
			}
		}
		respuesta.setnRoles(listaRoles.size());
		respuesta.setnRolesSincronizadosJiraInicial(mapRoles.size());
		
		int cont=0;
		for (RemoteProjectRole rJira:rolesJira ){
			
			if (!mapRoles.containsKey(rJira.getName())){
				//No existe, se debe crear el proyecto
				//Inventario inv= crearInventario(pJira);
				//mapInventario.put(inv.getCodJira(), inv);
				cont++;
				listaRespuesta.add(administracionHelper.cargarRolWithJiraDTO(rJira,"No"));
			}else{
				listaRespuesta.add(administracionHelper.cargarRolWithJiraDTO(mapRoles.get(rJira.getName()),"Sí")); 
			}
			
		}
		respuesta.setnRolesPendienteSincronizados(cont);
		respuesta.setListaRoles(listaRespuesta);
		
		return respuesta;
		
		

	}

	@Override
	public RespuestaSincronizadoJiraDTO ComprobarCrearRoles(List<String> listaRolesSincronizar) {
		Map <String,Rol> mapRoles= new HashMap<String,Rol>();
		RespuestaSincronizadoJiraDTO respuesta= new RespuestaSincronizadoJiraDTO();
		List<RolesWithJiraDTO> listaRespuesta= new ArrayList<RolesWithJiraDTO>();
		
		JiraWSumaInterface wsJira= new JiraWSumaImpl(Utilidades.getinstanceJiraconfiguration());
		
		
		List<Rol> listaRoles= rolDAO.executeQuery("Rol.findAll") ;
		
		respuesta.setnRolesSincronizadosJiraInicial(listaRoles.size());
		
		List<RemoteProjectRole>  rolesJira= wsJira.findAllRoles();
		Map<String, RemoteProjectRole> mapRemoteProjectRole= new HashMap<String, RemoteProjectRole>();
		for (RemoteProjectRole i : rolesJira) mapRemoteProjectRole.put(i.getName(),i);
		for (Rol i : listaRoles) {
			mapRoles.put(i.getNombre(),i);
			listaRespuesta.add(administracionHelper.cargarRolWithJiraDTO(mapRoles.get(i.getNombre()),"Sí")); 
		}

		
		
		//Se recorre la lista seleccionada
		for (String rolNombre:listaRolesSincronizar){
			
			RemoteProjectRole jRol= mapRemoteProjectRole.get(rolNombre);
			Rol rol= mapRoles.get(rolNombre);
			if (rol==null){
				//Sincronización Total
				respuesta.setnRolesSincronizadosJiraInicial(respuesta.getnRolesSincronizadosJiraInicial()+1);
				rol= new Rol();
				rol.setDescripcion(jRol.getDescription());
				rol.setNombre(jRol.getName());
				rolDAO.create(rol);
				mapRoles.put(rolNombre, rol);
				listaRespuesta.add(administracionHelper.cargarRolWithJiraDTO(mapRoles.get(rol.getNombre()),"Sí")); 

			}
		}

		int cont=0;

		for (RemoteProjectRole rJira:rolesJira ){
			
			if (!mapRoles.containsKey(rJira.getName())){
				cont++;
				listaRespuesta.add(administracionHelper.cargarRolWithJiraDTO(rJira,"No"));
			}
		}

		respuesta.setnRoles(mapRoles.size());
		respuesta.setnRolesPendienteSincronizados(cont);
		respuesta.setListaRoles(listaRespuesta);
		return respuesta;
		
	}
	
	

	
	
}
